* Goals
** Start and stop timer [0/4]
*** TODO I can start a timer when no timer is running
*** TODO I can stop a timer that is running
*** TODO I can start a new timer when another one is running
*** TODO I can start a timer straight after a previous entry
** Modify entries [0/3]
*** TODO Running timers [0/4]
**** TODO I can modify the start date
**** TODO I can modify the title
**** TODO I can modify the project
**** TODO I can set an end date and it ends the timer
*** TODO Finished timers [0/4]
**** TODO I can modify the start date
**** TODO I can modify the end date
**** TODO I can modify the title
**** TODO I can modify the project
*** TODO I can bulk add entries
** Manage projects [/]
** Manage tags [/]
** Record apps used by user [/]
** Resilience [0/2]
*** TODO Network [0/2]
**** TODO The app can run offline
**** TODO The app can stand loosing connection abruptly
*** TODO The app offers to solve conflicts when going online
** Reporting [/]
* Libraries
** API requests
*** +ocaml-fastrest+
*** +async-http+
*** +morph+
*** +ReWeb+
*** [[https://github.com/anmonteiro/piaf][Piaf]]
** UI
   Revery
* Journal
** Created project <2020-03-24 mar.>
- I created those notes first before any code.
- I ran the command `pesy` and a base project was created. Time to Git.
** Installed first dependency <2020-03-29 dim.> 
- I had to update Esy to latest version, it had trouble resolving the dependencies
- I installed also utop as dev dependency, running ~esy utop~ is really nice
- Piaf is really easy to use, especially module ~Piaf.Client.Oneshot~
** Created basic authentication <2020-04-13 lun.>
All of our requests will need authentication, and in Piaf there was no way to create a client that is
adding the Authorization header, so I created a functor that adds that header to all the requests.
The form might change later but the basic idea and authentication are there!

Found a better way, function creates an authenticated client fist class module.
** Simplified the authenticationlibrary <2020-04-15 mer.>
I realised I was going towards a library that was specific to Toggl with the ~`Session~ so I made the code a bit more generic.
It is only covering Basic authentication and Bearer token but so far it is enough.
